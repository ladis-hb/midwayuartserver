# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type AlarmStat {
  alarmStat: [String!]!
  name: String!
  unit: String!
  value: String!
}

type BindDevice {
  AGG: [aggregation!]!
  ECs: [ECterminal!]!
  UTs: [Terminal!]!
  user: String!
}

type Constant {
  BettyStat: [String!]!
  ColdChannelHumidity: String!
  ColdChannelTemperature: String!
  ColdModel: String!
  Dehumidification: String!
  HeatChannelHumidity: String!
  HeatChannelTemperature: String!
  HeatModel: String!
  Humidification: String!
  Humidity: String!
  InputStat: [String!]!
  OutStat: [String!]!
  RefrigerationHumidity: String!
  RefrigerationTemperature: String!
  Speed: String!
  Switch: String!
  Temperature: String!
  UpsStat: [String!]!
  WorkMode: String!
  battery: String!
  current: [String!]!
  di: [String!]!
  do: [String!]!
  factor: [String!]!
  voltage: [String!]!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type DevConstant {
  AlarmStat: [AlarmStat!]!
  Constant: Constant!
  OprateInstruct: [OprateInstruct!]!
  Protocol: String!
  ProtocolType: String!
  ShowTag: [String!]!
  Threshold: JSONObject!
}

type DevType {
  DevModel: String!
  Protocols: [Protocol!]!
  Type: String!
}

type ECterminal {
  ECid: String!
  model: String!
  name: String!
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Layout {
  bind: LayoutBind!
  color: String!
  id: String!
  name: String!
  x: Float!
  y: Float!
}

type LayoutBind {
  mac: String!
  name: String!
  pid: Float!
}

type LogTerminal {
  NodeIP: String!
  NodeName: String!
  TerminalMac: String!
  createdAt: DateTime!
  msg: String!
  query: JSONObject!
  result: JSONObject!
  type: String!
}

type MountDev {
  Type: String!
  mountDev: String!
  online: Boolean!
  pid: Float!
  protocol: String!
}

type Mutation {
  CreateUser(id: UserCreateInput!): String
}

type Node {
  IP: String!
  MaxConnections: String!
  Name: String!
  Port: Float!
}

type NodeInfo {
  Connections: Float!
  NodeName: String!
  SocketMaps: [NodeInfoTerminal!]!
  freemem: String!
  hostname: String!
  loadavg: [Float!]!
  totalmem: String!
  type: String!
  updateTime: String!
  uptime: String!
}

type NodeInfoTerminal {
  ip: String!
  jw: String!
  mac: String!
  port: Float!
}

type OprateInstruct {
  bl: String!
  name: String!
  readme: String!
  tag: String!
  value: String!
}

type Protocol {
  Protocol: String!
  ProtocolType: String!
  Type: Float!
  instruct: [ProtocolInstruct!]!
}

type ProtocolInstruct {
  formResize: JSONObject!
  isSplit: Boolean!
  isUse: Boolean!
  name: String!
  noStandard: Boolean!
  pop: Boolean!
  popNum: Float!
  resize: String!
  resultType: String!
  scriptEnd: String!
  scriptStart: String!
  shift: Boolean!
  shiftNum: Float!
}

type Query {
  BindDevice: BindDevice
  GetAllUsers(user: String!): String!
  Node(IP: String!, Name: String!): Node!
  Nodes: [Node!]!
}

type RegisterTerminal {
  DevMac: String!
  mountNode: String!
}

type Terminal {
  AT: Boolean!
  DevMac: String!
  Gver: String!
  ICCID: String!
  PID: String!
  iotStat: String!
  ip: String!
  jw: String!
  mountDevs: [MountDev!]!
  mountNode: String!
  name: String!
  online: Boolean!
  port: Float!
  uart: String!
  uptime: String!
  ver: String!
}

type UartTerminalData {
  Interval: Float!
  content: String!
  mac: String!
  pid: Float!
  protocol: String!
  result: [terminalData!]!
  stat: String!
  time: DateTime!
  timeStamp: String!
  type: Float!
  useTime: Float!
}

type User {
  address: String!
  avanter: String!
  company: String!
  creatTime: DateTime!
  mail: String!
  messageId: String!
  modifyTime: DateTime!
  name: String!
  openId: String!
  rgtype: String!
  status: Boolean!
  tel: String!
  user: String!
  userGroup: String!
  userId: String!
  wpId: String!
  wxId: String!
}

input UserCreateInput {
  name: String!
}

type UserLayout {
  Layout: [Layout!]!
  bg: String!
  id: String!
  type: String!
  user: String!
}

input UserPaginationInput {
  offset: Int!
  take: Int!
}

type UserSetup {
  ProtocolSetup: [DevConstant!]!
  mails: [String!]!
  tels: [String!]!
  user: String!
}

input UserUpdateInput {
  id: Int!
  name: String!
}

type aggregation {
  aggregations: [aggregationDev!]!
  devs: JSONObject!
  id: String!
  name: String!
  user: String!
}

type aggregationDev {
  DevMac: String!
  Type: String!
  mountDev: String!
  name: String!
  pid: Float!
  protocol: String!
}

type result {
  arg: JSONObject!
  msg: String!
  n: Float!
  nModified: Float!
  ok: Float!
}

type terminalData {
  alarm: Boolean!
  alias: String!
  issimulate: Boolean!
  name: String!
  parseValue: String!
  unit: String!
  value: String!
}
